{"version":3,"sources":["logiikka/työkalut.ts","logiikka/siirtoGeneraattorit.ts","logiikka/index.ts","Appi.tsx","index.tsx"],"names":["kopioi2dTaulukko","taulukko","palautettava","Array","length","i","lista","j","onkoPeliLoppu","lauta","kuninkaita","rivi","nappula","tyyppi","voikoSiirtää","väri","saaAinoastaan","vastustajanVäri","siirtoGeneraattorit","KUNINGAS","nappulaI","nappulaJ","uusiLauta","SOTILAS","RATSU","Math","abs","KUNINGATAR","TORNI","LÄHETTI","nappuloidenArvot","arvioiLaudanTilanne","tilanne","haeMahdollisetSiirrot","minimax","syvyys","alfa","beeta","siirronTekijä","parhaanSiirronArvo","Infinity","parasPositio","siirto","arvo","max","min","nappulaKoodiNimeksi","p","P","n","N","B","b","R","r","Q","q","K","k","nappulaNimiKoodiksi","ruudunKirjainIndeksiksi","a","c","d","e","f","g","h","ruudunIndeksiKirjaimeksi","Appi","useState","setLauta","edellinenLauta","setEdellinenLauta","setSyvyys","style","maxWidth","margin","pieces","onMovePiece","_","ruudusta","ruutuun","lautaSiirronJälkeen","filter","nappulaRuudussa","split","map","lautaNyt","nappulaInfo","toLowerCase","charAt","parseInt","lautaTekoälynSiirronJälkeen","minimaxSyvyys","haeLautaTekoälynSiirronJälkeen","entries","indexRivi","indexKolumni","nappulanKirjain","toUpperCase","push","window","confirm","location","reload","onDragStart","piece","notation","display","justifyContent","className","onClick","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.387c1bbe.chunk.js","sourcesContent":["import { Lauta } from \"../tyypit\";\n\n/**\n * Kopioi annettun taulukon (\"deep copy\")\n *\n * @param taulukko Kopioitava taulukko\n * @returns Kopioitu taulukko\n */\nexport const kopioi2dTaulukko = <T>(taulukko: T[][]) => {\n  const palautettava = new Array(taulukko.length);\n  for (let i = 0; i < taulukko.length; i++) {\n    const lista = new Array(taulukko[i].length);\n    for (let j = 0; j < taulukko[i].length; j++) {\n      lista[j] = taulukko[i][j];\n    }\n    palautettava[i] = lista;\n  }\n\n  return palautettava;\n};\n\n/**\n * Onko peli loppu\n *\n * @param lauta Laudan tila tällä hetkellä\n * @returns Onko peli loppu vai ei\n */\nexport const onkoPeliLoppu = (lauta: Lauta) => {\n  let kuninkaita = 0;\n  for (const rivi of lauta) {\n    for (const nappula of rivi) {\n      if (nappula?.tyyppi === \"KUNINGAS\") kuninkaita++;\n    }\n  }\n\n  return kuninkaita !== 2;\n};\n","import { Lauta, Nappula, NappulanTyyppi, Puoli } from \"../tyypit\";\nimport { kopioi2dTaulukko } from \"./työkalut\";\n\n/**\n * Palauttaa voiko annettuun ruutuun siirtää\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param väri Siirron tekijä\n * @param i Nappulan \"i\" indeksi laudalla\n * @param j Nappulan \"j\" indeksi laudalla\n * @param saaAinoastaan Voiko nappula vain syödä tai liikkua ruutuun siirtyessä (sotilaan erikoistapaus)\n * @returns Voiko annettuun ruutuun siirtää\n */\nconst voikoSiirtää = (\n  lauta: Lauta,\n  väri: Puoli,\n  i: number,\n  j: number,\n  saaAinoastaan?: \"SYÖDÄ\" | \"LIIKKUA\"\n) => {\n  // ei voida siirtää laudan ulkopuoelle\n  if (i < 0 || j < 0 || i > 7 || j > 7) return false;\n\n  const nappula = lauta[i][j];\n\n  // ei voida syödä omaa nappulaa\n  if (nappula?.väri === väri) return false;\n\n  // sotilas voi liikkua tiettyihin ruutuihin vain syödessä\n  const vastustajanVäri = väri === \"MUSTA\" ? \"VALKOINEN\" : \"MUSTA\";\n  if (saaAinoastaan === \"SYÖDÄ\" && nappula?.väri !== vastustajanVäri)\n    return false;\n\n  // sotilas voi liikkua tiettyihin ruutuihin vain jos siinä ei ole mitään nappulaa\n  if (saaAinoastaan === \"LIIKKUA\" && !!nappula) return false;\n\n  return true;\n};\n\nexport const siirtoGeneraattorit: Record<\n  NappulanTyyppi,\n  (\n    lauta: Lauta,\n    nappula: Nappula,\n    nappulaI: number,\n    nappulaJ: number\n  ) => Generator<Lauta>\n> = {\n  KUNINGAS: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI - 1][nappulaJ] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI, nappulaJ - 1)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI][nappulaJ - 1] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI + 1][nappulaJ] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI, nappulaJ + 1)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI][nappulaJ + 1] = nappula;\n      yield uusiLauta;\n    }\n  },\n  SOTILAS: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    if (nappula.väri === \"VALKOINEN\") {\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ, \"LIIKKUA\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ - 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ - 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ + 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ + 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (nappulaI === 1) {\n        if (\n          voikoSiirtää(lauta, nappula.väri, nappulaI + 2, nappulaJ, \"LIIKKUA\")\n        ) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI + 2][nappulaJ] = nappula;\n          yield uusiLauta;\n        }\n      }\n    } else {\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ, \"LIIKKUA\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ - 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ - 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ + 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ + 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (nappulaI === 6) {\n        if (\n          voikoSiirtää(lauta, nappula.väri, nappulaI - 2, nappulaJ, \"LIIKKUA\")\n        ) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI - 2][nappulaJ] = nappula;\n          yield uusiLauta;\n        }\n      }\n    }\n  },\n  RATSU: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    for (let i = -2; i <= 2; i++) {\n      for (let j = -2; j <= 2; j++) {\n        if (i === 0 || j === 0 || Math.abs(i) === Math.abs(j)) continue;\n        if (voikoSiirtää(lauta, nappula.väri, nappulaI + i, nappulaJ + j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI + i][nappulaJ + j] = nappula;\n          yield uusiLauta;\n        }\n      }\n    }\n  },\n  KUNINGATAR: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n    for (let i = nappulaI + 1; i < 8; i++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = nappulaI - 1; i >= 0; i--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ + 1; j < 8; j++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ - 1; j >= 0; j--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    let i = nappulaI;\n    let j = nappulaJ;\n    while (true) {\n      i++;\n      j++;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i++;\n      j--;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i--;\n      j++;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i--;\n      j--;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n  },\n  TORNI: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n    for (let i = nappulaI + 1; i < 8; i++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = nappulaI - 1; i >= 0; i--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ + 1; j < 8; j++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ - 1; j >= 0; j--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n  },\n  LÄHETTI: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    let i = nappulaI;\n    let j = nappulaJ;\n    while (true) {\n      i++;\n      j++;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i++;\n      j--;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i--;\n      j++;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    i = nappulaI;\n    j = nappulaJ;\n    while (true) {\n      i--;\n      j--;\n      if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][j]) break;\n      } else {\n        break;\n      }\n    }\n  },\n};\n","import { Lauta, Nappula, NappulanTyyppi, Puoli } from \"../tyypit\";\nimport { siirtoGeneraattorit } from \"./siirtoGeneraattorit\";\nimport { onkoPeliLoppu } from \"./työkalut\";\n\nconst nappuloidenArvot: { [key in NappulanTyyppi]: number } = {\n  SOTILAS: 1,\n  RATSU: 3,\n  LÄHETTI: 3.5,\n  TORNI: 5,\n  KUNINGATAR: 9,\n  KUNINGAS: 99999999999,\n};\n\n/**\n * Palauttaa laudan tämän hetkisen tilanteen staattisen analyysin\n *\n * @param lauta Laudan tila tällä hetkellä\n * @returns Laudan staattinen analyysi numerona, jossa isompi numero on parempi mustalle\n */\nconst arvioiLaudanTilanne = (lauta: Lauta) => {\n  let tilanne = 0;\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const nappula = lauta[i][j];\n      if (!nappula) continue;\n\n      if (nappula.väri === \"MUSTA\") {\n        tilanne += nappuloidenArvot[nappula.tyyppi];\n      } else {\n        tilanne -= nappuloidenArvot[nappula.tyyppi];\n      }\n    }\n  }\n\n  return tilanne;\n};\n\n/**\n * Palauta nappulan mahdolliset siirrot listana\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param nappula Nappula jota ollaan siirtämässä\n * @param nappulaI Nappulan \"i\" indeksi laudalla\n * @param nappulaJ Nappulan \"j\" indeksi laudalla\n * @returns Nappulan mahdolliset siirrot\n */\nconst haeMahdollisetSiirrot = (\n  lauta: Lauta,\n  nappula: Nappula,\n  nappulaI: number,\n  nappulaJ: number\n) => [\n  ...siirtoGeneraattorit[nappula.tyyppi](lauta, nappula, nappulaI, nappulaJ),\n];\n\n/**\n * Palauttaa laudan uuden tilan tekoälyn tekemän siirron jälkeen.\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param syvyys Minimax-algoritmin syvyys, jos 0 niin algoritmi on loppu\n * @param alfa Tämänhetkinen paras arvo, jonka musta on saavuttanut aiemmin puussa\n * @param beeta Tämänhetkinen paras arvo, jonka valkoinen on saavuttanut aiemmin puussa\n * @param siirronTekijä\n * @returns Laudan uusi tila tekoälyn siirron jälkeen\n */\nconst minimax = (\n  lauta: Lauta,\n  syvyys: number,\n  alfa: number,\n  beeta: number,\n  siirronTekijä: Puoli = \"MUSTA\"\n): [number, Lauta] => {\n  if (syvyys === 0 || onkoPeliLoppu(lauta)) {\n    return [arvioiLaudanTilanne(lauta), lauta];\n  }\n\n  // perusideana musta yrittää saada mahdollisimman ison arvon ja valkoinen pienen\n  if (siirronTekijä === \"MUSTA\") {\n    // alustetaan huonoimmalla mahdollisella arvolla\n    let parhaanSiirronArvo = -Infinity;\n    let parasPositio = lauta;\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        const nappula = lauta[i][j];\n        if (!nappula || nappula.väri !== \"MUSTA\") continue;\n\n        for (const siirto of haeMahdollisetSiirrot(lauta, nappula, i, j)) {\n          const [arvo] = minimax(siirto, syvyys - 1, alfa, beeta, \"VALKOINEN\");\n          if (arvo > parhaanSiirronArvo) {\n            parhaanSiirronArvo = arvo;\n            parasPositio = siirto;\n          }\n          alfa = Math.max(alfa, arvo);\n          if (beeta <= alfa) {\n            break;\n          }\n        }\n      }\n    }\n\n    return [parhaanSiirronArvo, parasPositio];\n  } else {\n    // alustetaan huonoimmalla mahdollisella arvolla\n    let parhaanSiirronArvo = +Infinity;\n    let parasPositio = lauta;\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        const nappula = lauta[i][j];\n        if (!nappula || nappula.väri !== \"VALKOINEN\") continue;\n\n        for (const siirto of haeMahdollisetSiirrot(lauta, nappula, i, j)) {\n          const [arvo] = minimax(siirto, syvyys - 1, alfa, beeta, \"MUSTA\");\n          if (arvo < parhaanSiirronArvo) {\n            parhaanSiirronArvo = arvo;\n            parasPositio = siirto;\n          }\n          beeta = Math.min(beeta, arvo);\n          if (beeta <= alfa) {\n            break;\n          }\n        }\n      }\n    }\n\n    return [parhaanSiirronArvo, parasPositio];\n  }\n};\n\n/**\n * Palauttaa laudan uuden tilan tekoälyn tekemän siirron jälkeen.\n *\n * @param lauta Laudan tila tällä hetkellä\n * @returns Laudan uusi tila tekoälyn siirron jälkeen\n */\nexport const haeLautaTekoälynSiirronJälkeen = (\n  lauta: Lauta,\n  minimaxSyvyys: number = 3\n) => {\n  return minimax(lauta, minimaxSyvyys, -Infinity, +Infinity, \"MUSTA\")[1];\n};\n","import React, { useState } from \"react\";\nimport Chess from \"react-chess\";\nimport { haeLautaTekoälynSiirronJälkeen } from \"./logiikka\";\nimport { onkoPeliLoppu } from \"./logiikka/työkalut\";\nimport { Lauta, Nappula, NappulanTyyppi } from \"./tyypit\";\n\nconst nappulaKoodiNimeksi: { [key: string]: NappulanTyyppi } = {\n  p: \"SOTILAS\",\n  P: \"SOTILAS\",\n  n: \"RATSU\",\n  N: \"RATSU\",\n  B: \"LÄHETTI\",\n  b: \"LÄHETTI\",\n  R: \"TORNI\",\n  r: \"TORNI\",\n  Q: \"KUNINGATAR\",\n  q: \"KUNINGATAR\",\n  K: \"KUNINGAS\",\n  k: \"KUNINGAS\",\n};\n\nconst nappulaNimiKoodiksi: Record<NappulanTyyppi, string> = {\n  SOTILAS: \"p\",\n  RATSU: \"n\",\n  LÄHETTI: \"b\",\n  TORNI: \"r\",\n  KUNINGATAR: \"q\",\n  KUNINGAS: \"k\",\n};\n\nconst ruudunKirjainIndeksiksi: Record<string, number> = {\n  a: 0,\n  b: 1,\n  c: 2,\n  d: 3,\n  e: 4,\n  f: 5,\n  g: 6,\n  h: 7,\n};\n\nconst ruudunIndeksiKirjaimeksi = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\nconst Appi = () => {\n  const [lauta, setLauta] = useState([\n    \"R@a1\",\n    \"P@a2\",\n    \"p@a7\",\n    \"r@a8\",\n    \"N@b1\",\n    \"P@b2\",\n    \"p@b7\",\n    \"n@b8\",\n    \"B@c1\",\n    \"P@c2\",\n    \"p@c7\",\n    \"b@c8\",\n    \"Q@d1\",\n    \"P@d2\",\n    \"p@d7\",\n    \"q@d8\",\n    \"K@e1\",\n    \"P@e2\",\n    \"p@e7\",\n    \"k@e8\",\n    \"B@f1\",\n    \"P@f2\",\n    \"p@f7\",\n    \"b@f8\",\n    \"N@g1\",\n    \"P@g2\",\n    \"p@g7\",\n    \"n@g8\",\n    \"R@h1\",\n    \"P@h2\",\n    \"p@h7\",\n    \"r@h8\",\n  ]);\n\n  const [edellinenLauta, setEdellinenLauta] = useState<string[] | null>(null);\n  const [syvyys, setSyvyys] = useState(3);\n\n  const onNappulanLiikutus = (_: any, ruudusta: string, ruutuun: string) => {\n    const lautaSiirronJälkeen = [...lauta]\n      // poistetaan mahdollisesti syöty nappula\n      .filter((nappulaRuudussa) => nappulaRuudussa.split(\"@\")[1] !== ruutuun)\n      // siirretään nappulaa\n      .map((nappulaRuudussa) => {\n        return nappulaRuudussa.split(\"@\")[1] === ruudusta\n          ? `${nappulaRuudussa.split(\"@\")[0]}@${ruutuun}`\n          : nappulaRuudussa;\n      });\n\n    const lautaNyt: Lauta = [\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n    ];\n\n    for (const nappulaInfo of lautaSiirronJälkeen) {\n      const nappula: Nappula = {\n        väri: nappulaInfo === nappulaInfo.toLowerCase() ? \"MUSTA\" : \"VALKOINEN\",\n        tyyppi: nappulaKoodiNimeksi[nappulaInfo.charAt(0)],\n      };\n\n      lautaNyt[parseInt(nappulaInfo.charAt(3)) - 1][\n        ruudunKirjainIndeksiksi[nappulaInfo.charAt(2)]\n      ] = nappula;\n    }\n\n    const uusiLauta: string[] = [];\n\n    const lautaTekoälynSiirronJälkeen = haeLautaTekoälynSiirronJälkeen(\n      lautaNyt,\n      syvyys\n    );\n\n    for (const [indexRivi, rivi] of lautaTekoälynSiirronJälkeen.entries()) {\n      for (const [indexKolumni, nappula] of rivi.entries()) {\n        if (!nappula) continue;\n        let nappulanKirjain = nappulaNimiKoodiksi[nappula.tyyppi];\n        if (nappula.väri === \"VALKOINEN\")\n          nappulanKirjain = nappulanKirjain.toUpperCase();\n        uusiLauta.push(\n          `${nappulanKirjain}@${ruudunIndeksiKirjaimeksi[indexKolumni]}${\n            indexRivi + 1\n          }`\n        );\n      }\n    }\n\n    setEdellinenLauta(lauta);\n    setLauta(uusiLauta);\n\n    if (onkoPeliLoppu(lautaTekoälynSiirronJälkeen)) {\n      const uusiPeli = window.confirm(\n        \"Peli loppui. Aloita uusi peli valitsemalla 'OK' tai jatka valitsemalla 'Cancel'.\"\n      );\n\n      if (uusiPeli) window.location.reload();\n    }\n  };\n\n  return (\n    <div\n      style={{\n        maxWidth: \"48rem\",\n        margin: \"auto\",\n      }}\n    >\n      <Chess\n        pieces={lauta}\n        onMovePiece={onNappulanLiikutus}\n        onDragStart={(piece) =>\n          piece.notation.split(\"@\")[0] ===\n          piece.notation.split(\"@\")[0].toUpperCase()\n        }\n      />\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div>\n          {!!edellinenLauta ? (\n            <button\n              className=\"big-button\"\n              onClick={() => {\n                setLauta(edellinenLauta!);\n                setEdellinenLauta(null);\n              }}\n            >\n              Hups 🔙\n            </button>\n          ) : (\n            <div />\n          )}\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <button\n            onClick={() => setSyvyys(1)}\n            className={`big-button${syvyys === 1 ? \" active\" : \"\"}`}\n          >\n            Helppo 🥱\n          </button>\n          <button\n            onClick={() => setSyvyys(2)}\n            className={`big-button${syvyys === 2 ? \" active\" : \"\"}`}\n          >\n            Normaali 😐\n          </button>\n          <button\n            onClick={() => setSyvyys(3)}\n            className={`big-button${syvyys === 3 ? \" active\" : \"\"}`}\n          >\n            Haastava 😓\n          </button>\n          <button\n            onClick={() => setSyvyys(4)}\n            className={`big-button${syvyys === 4 ? \" active\" : \"\"}`}\n          >\n            Vaikea 😠\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Appi;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Appi from \"./Appi\";\n\nReactDOM.render(<Appi />, document.getElementById(\"root\"));\n"],"sourceRoot":""}