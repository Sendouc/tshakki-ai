{"version":3,"sources":["logiikka/työkalut.ts","logiikka/siirtoGeneraattorit.ts","logiikka/index.ts","Appi.tsx","index.tsx"],"names":["kopioi2dTaulukko","taulukko","palautettava","Array","length","i","lista","j","voikoSiirtää","lauta","väri","saaAinoastaan","nappula","vastustajanVäri","siirtoGeneraattorit","KUNINGAS","nappulaI","nappulaJ","uusiLauta","SOTILAS","RATSU","KUNINGATAR","TORNI","LÄHETTI","nappuloidenArvot","arvioiLaudanTilanne","tilanne","tyyppi","haeMahdollisetSiirrot","minimax","syvyys","alfa","beeta","siirronTekijä","parhaanSiirronArvo","Infinity","parasPositio","siirto","arvo","Math","max","min","nappulaKoodiNimeksi","p","P","n","N","B","b","R","r","Q","q","K","k","nappulaNimiKoodiksi","ruudunKirjainIndeksiksi","a","c","d","e","f","g","h","ruudunIndeksiKirjaimeksi","Appi","useState","setLauta","edellinenLauta","setEdellinenLauta","setSyvyys","style","maxWidth","margin","pieces","onMovePiece","_","ruudusta","ruutuun","lautaSiirronJälkeen","filter","nappulaRuudussa","split","map","lautaNyt","nappulaInfo","toLowerCase","charAt","parseInt","lautaTekoälynSiirronJälkeen","minimaxSyvyys","haeLautaTekoälynSiirronJälkeen","entries","indexRivi","rivi","indexKolumni","nappulanKirjain","toUpperCase","push","onDragStart","piece","notation","display","justifyContent","className","onClick","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3bc4d52.chunk.js","sourcesContent":["/**\n * Kopioi annettun taulukon (\"deep copy\")\n *\n * @param taulukko Kopioitava taulukko\n * @returns Kopioitu taulukko\n */\nexport const kopioi2dTaulukko = <T>(taulukko: T[][]) => {\n  const palautettava = new Array(taulukko.length);\n  for (let i = 0; i < taulukko.length; i++) {\n    const lista = new Array(taulukko[i].length);\n    for (let j = 0; j < taulukko[i].length; j++) {\n      lista[j] = taulukko[i][j];\n    }\n    palautettava[i] = lista;\n  }\n\n  return palautettava;\n};\n","import { Lauta, Nappula, NappulanTyyppi, Puoli } from \"../tyypit\";\nimport { kopioi2dTaulukko } from \"./työkalut\";\n\n/**\n * Palauttaa voiko annettuun ruutuun siirtää\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param väri Siirron tekijä\n * @param i Nappulan \"i\" indeksi laudalla\n * @param j Nappulan \"j\" indeksi laudalla\n * @param saaAinoastaan Voiko nappula vain syödä tai liikkua ruutuun siirtyessä (sotilaan erikoistapaus)\n * @returns Voiko annettuun ruutuun siirtää\n */\nconst voikoSiirtää = (\n  lauta: Lauta,\n  väri: Puoli,\n  i: number,\n  j: number,\n  saaAinoastaan?: \"SYÖDÄ\" | \"LIIKKUA\"\n) => {\n  // ei voida siirtää laudan ulkopuoelle\n  if (i < 0 || j < 0 || i > 7 || j > 7) return false;\n\n  const nappula = lauta[i][j];\n\n  // ei voida syödä omaa nappulaa\n  if (nappula?.väri === väri) return false;\n\n  // sotilas voi liikkua tiettyihin ruutuihin vain syödessä\n  const vastustajanVäri = väri === \"MUSTA\" ? \"VALKOINEN\" : \"MUSTA\";\n  if (saaAinoastaan === \"SYÖDÄ\" && nappula?.väri !== vastustajanVäri)\n    return false;\n\n  // sotilas voi liikkua tiettyihin ruutuihin vain jos siinä ei ole mitään nappulaa\n  if (saaAinoastaan === \"LIIKKUA\" && !!nappula) return false;\n\n  return true;\n};\n\nexport const siirtoGeneraattorit: Record<\n  NappulanTyyppi,\n  (\n    lauta: Lauta,\n    nappula: Nappula,\n    nappulaI: number,\n    nappulaJ: number\n  ) => Generator<Lauta>\n> = {\n  KUNINGAS: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI - 1][nappulaJ] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI, nappulaJ - 1)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI][nappulaJ - 1] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI + 1][nappulaJ] = nappula;\n      yield uusiLauta;\n    }\n\n    if (voikoSiirtää(lauta, nappula.väri, nappulaI, nappulaJ + 1)) {\n      uusiLauta = kopioi2dTaulukko(lauta);\n      uusiLauta[nappulaI][nappulaJ] = null;\n      uusiLauta[nappulaI][nappulaJ + 1] = nappula;\n      yield uusiLauta;\n    }\n  },\n  SOTILAS: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    if (nappula.väri === \"VALKOINEN\") {\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ, \"LIIKKUA\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ - 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ - 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI + 1, nappulaJ + 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI + 1][nappulaJ + 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (nappulaI === 1) {\n        if (\n          voikoSiirtää(lauta, nappula.väri, nappulaI + 2, nappulaJ, \"LIIKKUA\")\n        ) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI + 2][nappulaJ] = nappula;\n          yield uusiLauta;\n        }\n      }\n    } else {\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ, \"LIIKKUA\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ - 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ - 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (\n        voikoSiirtää(lauta, nappula.väri, nappulaI - 1, nappulaJ + 1, \"SYÖDÄ\")\n      ) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI - 1][nappulaJ + 1] = nappula;\n        yield uusiLauta;\n      }\n\n      if (nappulaI === 6) {\n        if (\n          voikoSiirtää(lauta, nappula.väri, nappulaI - 2, nappulaJ, \"LIIKKUA\")\n        ) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI - 2][nappulaJ] = nappula;\n          yield uusiLauta;\n        }\n      }\n    }\n  },\n  RATSU: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    for (let i = -2; i <= 2; i++) {\n      for (let j = -2; j <= 2; j++) {\n        if (i === 0 || j === 0 || i === j) continue;\n        if (voikoSiirtää(lauta, nappula.väri, nappulaI + i, nappulaJ + j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[nappulaI + i][nappulaJ + j] = nappula;\n          yield uusiLauta;\n        }\n      }\n    }\n  },\n  KUNINGATAR: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n    for (let i = nappulaI + 1; i < 8; i++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = nappulaI - 1; i >= 0; i--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ + 1; j < 8; j++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ - 1; j >= 0; j--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    loop: for (let i = nappulaI + 1; i < 8; i++) {\n      for (let j = nappulaJ + 1; j < 8; j++) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI + 1; i < 8; i++) {\n      for (let j = nappulaJ - 1; j >= 0; j--) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI - 1; i >= 0; i--) {\n      for (let j = nappulaJ + 1; j < 8; j++) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI - 1; i >= 0; i--) {\n      for (let j = nappulaJ - 1; j >= 0; j--) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n  },\n  TORNI: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n    for (let i = nappulaI + 1; i < 8; i++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = nappulaI - 1; i >= 0; i--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, i, nappulaJ);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[i][nappulaJ] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[i][nappulaJ]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ + 1; j < 8; j++) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n\n    for (let j = nappulaJ - 1; j >= 0; j--) {\n      const onLaillinenSiirto = voikoSiirtää(lauta, nappula.väri, nappulaI, j);\n\n      if (onLaillinenSiirto) {\n        uusiLauta = kopioi2dTaulukko(lauta);\n        uusiLauta[nappulaI][nappulaJ] = null;\n        uusiLauta[nappulaI][j] = nappula;\n        yield uusiLauta;\n\n        if (!!lauta[nappulaI][j]) break;\n      } else {\n        break;\n      }\n    }\n  },\n  LÄHETTI: function* (lauta, nappula, nappulaI, nappulaJ) {\n    let uusiLauta: Lauta | null = null;\n\n    loop: for (let i = nappulaI + 1; i < 8; i++) {\n      for (let j = nappulaJ + 1; j < 8; j++) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI + 1; i < 8; i++) {\n      for (let j = nappulaJ - 1; j >= 0; j--) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI - 1; i >= 0; i--) {\n      for (let j = nappulaJ + 1; j < 8; j++) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n\n    loop: for (let i = nappulaI - 1; i >= 0; i--) {\n      for (let j = nappulaJ - 1; j >= 0; j--) {\n        if (voikoSiirtää(lauta, nappula.väri, i, j)) {\n          uusiLauta = kopioi2dTaulukko(lauta);\n          uusiLauta[nappulaI][nappulaJ] = null;\n          uusiLauta[i][j] = nappula;\n          yield uusiLauta;\n\n          if (!!lauta[i][j]) break;\n        } else {\n          break loop;\n        }\n      }\n    }\n  },\n};\n","import { Lauta, Nappula, NappulanTyyppi, Puoli } from \"../tyypit\";\nimport { siirtoGeneraattorit } from \"./siirtoGeneraattorit\";\n\nconst nappuloidenArvot: { [key in NappulanTyyppi]: number } = {\n  SOTILAS: 1,\n  RATSU: 3,\n  LÄHETTI: 3.5,\n  TORNI: 5,\n  KUNINGATAR: 9,\n  KUNINGAS: 99999999999,\n};\n\n/**\n * Palauttaa laudan tämän hetkisen tilanteen staattisen analyysin\n *\n * @param lauta Laudan tila tällä hetkellä\n * @returns Laudan staattinen analyysi numerona, jossa isompi numero on parempi mustalle\n */\nconst arvioiLaudanTilanne = (lauta: Lauta) => {\n  let tilanne = 0;\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      const nappula = lauta[i][j];\n      if (!nappula) continue;\n\n      if (nappula.väri === \"MUSTA\") {\n        tilanne += nappuloidenArvot[nappula.tyyppi];\n      } else {\n        tilanne -= nappuloidenArvot[nappula.tyyppi];\n      }\n    }\n  }\n\n  return tilanne;\n};\n\n/**\n * Palauta nappulan mahdolliset siirrot listana\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param nappula Nappula jota ollaan siirtämässä\n * @param nappulaI Nappulan \"i\" indeksi laudalla\n * @param nappulaJ Nappulan \"j\" indeksi laudalla\n * @returns Nappulan mahdolliset siirrot\n */\nconst haeMahdollisetSiirrot = (\n  lauta: Lauta,\n  nappula: Nappula,\n  nappulaI: number,\n  nappulaJ: number\n) => [\n  ...siirtoGeneraattorit[nappula.tyyppi](lauta, nappula, nappulaI, nappulaJ),\n];\n\n/**\n * Palauttaa laudan uuden tilan tekoälyn tekemän siirron jälkeen.\n *\n * @param lauta Laudan tila tällä hetkellä\n * @param syvyys Minimax-algoritmin syvyys, jos 0 niin algoritmi on loppu\n * @param alfa Tämänhetkinen paras arvo, jonka musta on saavuttanut aiemmin puussa\n * @param beeta Tämänhetkinen paras arvo, jonka valkoinen on saavuttanut aiemmin puussa\n * @param siirronTekijä\n * @returns Laudan uusi tila tekoälyn siirron jälkeen\n */\nconst minimax = (\n  lauta: Lauta,\n  syvyys: number,\n  alfa: number,\n  beeta: number,\n  siirronTekijä: Puoli = \"MUSTA\"\n): [number, Lauta] => {\n  if (syvyys === 0 /* TODO: tai peli on loppu */) {\n    return [arvioiLaudanTilanne(lauta), lauta];\n  }\n\n  // perusideana musta yrittää saada mahdollisimman ison arvon ja valkoinen pienen\n  if (siirronTekijä === \"MUSTA\") {\n    // alustetaan huonoimmalla mahdollisella arvolla\n    let parhaanSiirronArvo = -Infinity;\n    let parasPositio = lauta;\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        const nappula = lauta[i][j];\n        if (!nappula || nappula.väri !== \"MUSTA\") continue;\n\n        for (const siirto of haeMahdollisetSiirrot(lauta, nappula, i, j)) {\n          const [arvo] = minimax(siirto, syvyys - 1, alfa, beeta, \"VALKOINEN\");\n          if (arvo > parhaanSiirronArvo) {\n            parhaanSiirronArvo = arvo;\n            parasPositio = siirto;\n          }\n          alfa = Math.max(alfa, arvo);\n          if (beeta <= alfa) {\n            break;\n          }\n        }\n      }\n    }\n\n    return [parhaanSiirronArvo, parasPositio];\n  } else {\n    // alustetaan huonoimmalla mahdollisella arvolla\n    let parhaanSiirronArvo = +Infinity;\n    let parasPositio = lauta;\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        const nappula = lauta[i][j];\n        if (!nappula || nappula.väri !== \"VALKOINEN\") continue;\n\n        for (const siirto of haeMahdollisetSiirrot(lauta, nappula, i, j)) {\n          const [arvo] = minimax(siirto, syvyys - 1, alfa, beeta, \"MUSTA\");\n          if (arvo < parhaanSiirronArvo) {\n            parhaanSiirronArvo = arvo;\n            parasPositio = siirto;\n          }\n          beeta = Math.min(beeta, arvo);\n          if (beeta <= alfa) {\n            break;\n          }\n        }\n      }\n    }\n\n    return [parhaanSiirronArvo, parasPositio];\n  }\n};\n\n/**\n * Palauttaa laudan uuden tilan tekoälyn tekemän siirron jälkeen.\n *\n * @param lauta Laudan tila tällä hetkellä\n * @returns Laudan uusi tila tekoälyn siirron jälkeen\n */\nexport const haeLautaTekoälynSiirronJälkeen = (\n  lauta: Lauta,\n  minimaxSyvyys: number = 3\n) => {\n  return minimax(lauta, minimaxSyvyys, -Infinity, +Infinity, \"MUSTA\")[1];\n};\n","import React, { useState } from \"react\";\nimport Chess from \"react-chess\";\nimport { haeLautaTekoälynSiirronJälkeen } from \"./logiikka\";\nimport { Lauta, Nappula, NappulanTyyppi } from \"./tyypit\";\n\nconst nappulaKoodiNimeksi: { [key: string]: NappulanTyyppi } = {\n  p: \"SOTILAS\",\n  P: \"SOTILAS\",\n  n: \"RATSU\",\n  N: \"RATSU\",\n  B: \"LÄHETTI\",\n  b: \"LÄHETTI\",\n  R: \"TORNI\",\n  r: \"TORNI\",\n  Q: \"KUNINGATAR\",\n  q: \"KUNINGATAR\",\n  K: \"KUNINGAS\",\n  k: \"KUNINGAS\",\n};\n\nconst nappulaNimiKoodiksi: Record<NappulanTyyppi, string> = {\n  SOTILAS: \"p\",\n  RATSU: \"n\",\n  LÄHETTI: \"b\",\n  TORNI: \"r\",\n  KUNINGATAR: \"q\",\n  KUNINGAS: \"k\",\n};\n\nconst ruudunKirjainIndeksiksi: Record<string, number> = {\n  a: 0,\n  b: 1,\n  c: 2,\n  d: 3,\n  e: 4,\n  f: 5,\n  g: 6,\n  h: 7,\n};\n\nconst ruudunIndeksiKirjaimeksi = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\nconst Appi = () => {\n  const [lauta, setLauta] = useState([\n    \"R@a1\",\n    \"P@a2\",\n    \"p@a7\",\n    \"r@a8\",\n    \"N@b1\",\n    \"P@b2\",\n    \"p@b7\",\n    \"n@b8\",\n    \"B@c1\",\n    \"P@c2\",\n    \"p@c7\",\n    \"b@c8\",\n    \"Q@d1\",\n    \"P@d2\",\n    \"p@d7\",\n    \"q@d8\",\n    \"K@e1\",\n    \"P@e2\",\n    \"p@e7\",\n    \"k@e8\",\n    \"B@f1\",\n    \"P@f2\",\n    \"p@f7\",\n    \"b@f8\",\n    \"N@g1\",\n    \"P@g2\",\n    \"p@g7\",\n    \"n@g8\",\n    \"R@h1\",\n    \"P@h2\",\n    \"p@h7\",\n    \"r@h8\",\n  ]);\n\n  const [edellinenLauta, setEdellinenLauta] = useState<string[] | null>(null);\n  const [syvyys, setSyvyys] = useState(3);\n\n  const onNappulanLiikutus = (_: any, ruudusta: string, ruutuun: string) => {\n    const lautaSiirronJälkeen = [...lauta]\n      // poistetaan mahdollisesti syöty nappula\n      .filter((nappulaRuudussa) => nappulaRuudussa.split(\"@\")[1] !== ruutuun)\n      // siirretään nappulaa\n      .map((nappulaRuudussa) => {\n        return nappulaRuudussa.split(\"@\")[1] === ruudusta\n          ? `${nappulaRuudussa.split(\"@\")[0]}@${ruutuun}`\n          : nappulaRuudussa;\n      });\n\n    const lautaNyt: Lauta = [\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n    ];\n\n    for (const nappulaInfo of lautaSiirronJälkeen) {\n      const nappula: Nappula = {\n        väri: nappulaInfo === nappulaInfo.toLowerCase() ? \"MUSTA\" : \"VALKOINEN\",\n        tyyppi: nappulaKoodiNimeksi[nappulaInfo.charAt(0)],\n      };\n\n      lautaNyt[parseInt(nappulaInfo.charAt(3)) - 1][\n        ruudunKirjainIndeksiksi[nappulaInfo.charAt(2)]\n      ] = nappula;\n    }\n\n    const uusiLauta: string[] = [];\n\n    const lautaTekoälynSiirronJälkeen = haeLautaTekoälynSiirronJälkeen(\n      lautaNyt,\n      syvyys\n    );\n\n    for (const [indexRivi, rivi] of lautaTekoälynSiirronJälkeen.entries()) {\n      for (const [indexKolumni, nappula] of rivi.entries()) {\n        if (!nappula) continue;\n        let nappulanKirjain = nappulaNimiKoodiksi[nappula.tyyppi];\n        if (nappula.väri === \"VALKOINEN\")\n          nappulanKirjain = nappulanKirjain.toUpperCase();\n        uusiLauta.push(\n          `${nappulanKirjain}@${ruudunIndeksiKirjaimeksi[indexKolumni]}${\n            indexRivi + 1\n          }`\n        );\n      }\n    }\n\n    setEdellinenLauta(lauta);\n    setLauta(uusiLauta);\n  };\n\n  return (\n    <div\n      style={{\n        maxWidth: \"48rem\",\n        margin: \"auto\",\n      }}\n    >\n      <Chess\n        pieces={lauta}\n        onMovePiece={onNappulanLiikutus}\n        onDragStart={(piece) =>\n          piece.notation.split(\"@\")[0] ===\n          piece.notation.split(\"@\")[0].toUpperCase()\n        }\n      />\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div>\n          {!!edellinenLauta ? (\n            <button\n              className=\"big-button\"\n              onClick={() => {\n                setLauta(edellinenLauta!);\n                setEdellinenLauta(null);\n              }}\n            >\n              Hups 🔙\n            </button>\n          ) : (\n            <div />\n          )}\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <button\n            onClick={() => setSyvyys(1)}\n            className={`big-button${syvyys === 1 ? \" active\" : \"\"}`}\n          >\n            Helppo 🥱\n          </button>\n          <button\n            onClick={() => setSyvyys(2)}\n            className={`big-button${syvyys === 2 ? \" active\" : \"\"}`}\n          >\n            Normaali 😐\n          </button>\n          <button\n            onClick={() => setSyvyys(3)}\n            className={`big-button${syvyys === 3 ? \" active\" : \"\"}`}\n          >\n            Haastava 😓\n          </button>\n          <button\n            onClick={() => setSyvyys(4)}\n            className={`big-button${syvyys === 4 ? \" active\" : \"\"}`}\n          >\n            Vaikea 😠\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Appi;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Appi from \"./Appi\";\n\nReactDOM.render(<Appi />, document.getElementById(\"root\"));\n"],"sourceRoot":""}